/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.biz.ui.prototype;

import com.components.custom.ActionTask;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import org.biz.app.ui.util.MessageBoxes;
import org.biz.invoicesystem.entity.master.SKU;
import org.biz.invoicesystem.entity.transactions.SalesInvoiceLineItem;
import org.biz.invoicesystem.ui.list.master.SKUController;
import org.biz.invoicesystem.ui.list.master.SKULVUI;
import org.components.parent.controls.PTableColumn;
import org.components.windows.UIController;

/**
 *
 * @author user
 */
public class SalesInvoiceLineDetailTableUI extends TableRowDetail  {
        
    private SalesInvoiceControler sic;
    private SalesInvoiceLineItem salesLine = new SalesInvoiceLineItem();
    

    /**
     * Creates new form SalesInvoiceLineDetailUI
     */
    public SalesInvoiceLineDetailTableUI() {
        initComponents();
//        setFocusable(true);
        initUI();
      

    }
    
    public Object getLineObject(){
        return salesLine;
    }
        
  
    
    public void setSalesInvoiceController(UIController  con ){
        sic = (SalesInvoiceControler) con;        
    }
   
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cButton2 = new org.components.controls.CButton();
        cButton1 = new org.components.controls.CButton();
        tTotal = new org.components.controls.CTextField();
        tItemSearchTextComp = new com.components.custom.TextFieldWithPopUP<>();
        cLabel1 = new org.components.controls.CLabel();
        cLabel2 = new org.components.controls.CLabel();
        tQty = new org.components.controls.CCurrencyField();
        tPrice = new org.components.controls.CCurrencyField();
        cLabel3 = new org.components.controls.CLabel();

        setPreferredSize(new java.awt.Dimension(671, 47));
        setLayout(null);

        cButton2.setText("X");
        cButton2.setMaximumSize(new java.awt.Dimension(38, 34));
        cButton2.setPreferredSize(new java.awt.Dimension(38, 34));
        cButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButton2ActionPerformed(evt);
            }
        });
        add(cButton2);
        cButton2.setBounds(530, 30, 38, 34);

        cButton1.setText("+");
        cButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButton1ActionPerformed(evt);
            }
        });
        add(cButton1);
        cButton1.setBounds(490, 28, 37, 34);
        add(tTotal);
        tTotal.setBounds(400, 30, 84, 30);
        add(tItemSearchTextComp);
        tItemSearchTextComp.setBounds(10, 30, 189, 30);

        cLabel1.setText("Price");
        add(cLabel1);
        cLabel1.setBounds(315, 0, 104, 19);

        cLabel2.setText("Qty");
        add(cLabel2);
        cLabel2.setBounds(200, 0, 104, 19);
        add(tQty);
        tQty.setBounds(200, 30, 98, 30);
        add(tPrice);
        tPrice.setBounds(300, 30, 97, 30);

        cLabel3.setText("Item");
        add(cLabel3);
        cLabel3.setBounds(20, 0, 178, 19);
    }// </editor-fold>//GEN-END:initComponents

    private void cButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButton1ActionPerformed


        tableContainer.acceptLineChanges();
        
//        mycontainer.add(new NewJPanel());
//        silineItem.add(this);
//        containerUI.addNewLineGotoNewLine();
        
        

        ///listener . addLineItem
    }//GEN-LAST:event_cButton1ActionPerformed

    private void cButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButton2ActionPerformed
        tableContainer.removeSelected();  
        
        
    }//GEN-LAST:event_cButton2ActionPerformed

    
    public void initUI() {
//        ItemController ic = new ItemController();
        super.initUI();
        
        tItemSearchTextComp.setName("Item");
        tPrice.setName("PriceText");
        tQty.setName("Qty");
        
        SKUController  sk = new SKUController();
        
        tItemSearchTextComp.setListViewQueryManger(sk.getPopupQueryManger(), 
                new SKULVUI());
        tItemSearchTextComp.setSelectedProperty("code");        


        tPrice.setDocAction(new MyCalculator());
        tPrice.setAlwaysEnterEvent(true);
        
        tQty.setDocAction(new MyCalculator());
        tQty.setActionTask(new ActionTask() {

            @Override
            public Component actionFired(Object source) {
                sic.onSalesInvoiceLineItemQTYChanged(SalesInvoiceLineDetailTableUI.this);
                return tPrice;
            }
        });

      
        tPrice.setActionTask(new ActionTask() {

            @Override
            public Component actionFired(Object source) {
                final JComponent onSalesInvoiceLineItemPriceChanged = sic.onSalesInvoiceLineItemPriceChanged(SalesInvoiceLineDetailTableUI.this);
                
                //create the line item 
                // is this line item valid ?
                //add to business object validate business object
                // then add it to table                
                System.out.println("price value " +tPrice.getText());
                return onSalesInvoiceLineItemPriceChanged;              
              
                
            }
        });

        

        
        tTotal.setEditable(false);
        addToFocus(tItemSearchTextComp);        
        addToFocus(tQty);        
        addToFocus(tPrice);       
        
        

    }

    
    public void setTableContainer(TableContainer tableContainer) {
        super.setTableContainer(tableContainer);
        List<PTableColumn> tblCols = new ArrayList();
        final PTableColumn ptc1 = new PTableColumn(String.class, "ID");        
        tblCols.add(ptc1);        
        PTableColumn colcode = new PTableColumn(String.class, "Code");
        colcode.setMinWidth(150);
        tblCols.add(colcode);
        final PTableColumn coldesc = new PTableColumn(String.class, "Description");
        tblCols.add(coldesc);
        coldesc.setMinWidth(200);
        tblCols.add(new PTableColumn(Double.class, "QTY"));
        tblCols.add(new PTableColumn(Double.class, "Price"));
        tblCols.add(new PTableColumn(Double.class, "LineAmount"));
        tableContainer.initTable(SalesInvoiceLineItem.class, tblCols);


    }
    
    public SalesInvoiceLineItem panelToData() {
        SalesInvoiceLineItem sil= new SalesInvoiceLineItem();
        sil.setSku(tItemSearchTextComp.getSelectedObject());
        sil.setQty(tQty.getDoubleValue());
        sil.setPrice(tPrice.getDoubleValue());
        return sil;

    }

    public void setDataToPanel(Object data) {
        SalesInvoiceLineItem li = (SalesInvoiceLineItem) data;
        tItemSearchTextComp.setSelectedObject(li.getSku());
        
        tQty.setValue(li.getQty());
        tPrice.setValue(li.getPrice());
        tTotal.setValue(li.getLineAmount());
        salesLine = li;
    }
    
    public void setDataToPanelIFNotFocused(Object data) {
        SalesInvoiceLineItem li = (SalesInvoiceLineItem) data;
        tItemSearchTextComp.setSelectedObject(li.getSku());
        
        tQty.setValueIfNotFocused(li.getQty());
        tPrice.setValueIfNotFocused(li.getPrice());
        tTotal.setValueIfNotFocused(li.getLineAmount());
        salesLine = li;
    }
    
     private class MyCalculator extends ActionTask{
        
        public void actionCall() {            
            sic.onSalesInvoiceLineItemDocChanged(SalesInvoiceLineDetailTableUI.this);
        }
        
    } 
   
   
     
    public void onRemoveLineItem(Object selectedObject) {
        sic.onRemoveLineItem((SalesInvoiceLineItem)selectedObject);
    } 

    public Object[] getTableData(Object row) {
        SalesInvoiceLineItem sl = (SalesInvoiceLineItem) row;
        SKU selItem = sl.getSku();
        return new Object[]{sl,sl.getId(), selItem != null ? sl.getSku().getCode() : "", selItem != null ? selItem.getExplainningSearchString(): "",
            sl.getQty(), sl.getPrice(), sl.getLineAmount()};
    }
    
    public void clearLineUI() {        
        super.clearLineUI();
        tItemSearchTextComp.clear();
        tQty.clear();
        tPrice.clear();
        tTotal.clear();
        salesLine =new SalesInvoiceLineItem();
    
    }
    
    public void clearAll() {
        super.clearAll();
        sic.clearTableUI();
        
    }

    public JComponent getInValidComponent() {
      
        if (tItemSearchTextComp.getSelectedObject()== null) {
            //ErrorAlert
            MessageBoxes.errormsg(tItemSearchTextComp, "Item should be selected", "Item");
            return tItemSearchTextComp;            
        }
        
        if (!tQty.isValidPositiveDoubleValue()) {
            //ErrorAlert
            MessageBoxes.errormsg(tQty, "Quantity Should be more then zero", "Quantity");
            return tQty;
        }
        if(!tPrice.isValidPositiveDoubleValue() ){
            //ErrorAlert
            MessageBoxes.errormsg(tPrice, "Price Should be more then zero", "Price");
            return tPrice;
            
        }
        
     
        return null;        
    }
  
    boolean isValidToAccept() {

        SalesInvoiceLineItem sl = panelToData();
        if(sl.getSku()==null || sl.getLineAmount()<=0 ||                
                sl.getQty()<=0 || sl.getPrice()<=0){
            return false;
        }
        
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.components.controls.CButton cButton1;
    private org.components.controls.CButton cButton2;
    private org.components.controls.CLabel cLabel1;
    private org.components.controls.CLabel cLabel2;
    private org.components.controls.CLabel cLabel3;
    private com.components.custom.TextFieldWithPopUP<SKU> tItemSearchTextComp;
    private org.components.controls.CCurrencyField tPrice;
    private org.components.controls.CCurrencyField tQty;
    private org.components.controls.CTextField tTotal;
    // End of variables declaration//GEN-END:variables

    

}
